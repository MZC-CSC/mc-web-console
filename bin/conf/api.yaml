cliSpecVersion: v1
# Service Definitions (Framework Server Basic informations)
services:
  mc-infra-connector: #service name
    baseurl: http://dev.onecloudcon.com:1024/spider  # baseurl is Scheme + Host + Base Path
    auth: #If you need an authentication method, describe the type and username and password in the sub
      type: basic
      username: default
      password: default
  
  mc-infra-manager:
    baseurl: http://dev.onecloudcon.com:1323/tumblebug
    auth:
      type: basic
      username: default
      password: default

  mc-iam-manager:
    baseurl: http://dev.onecloudcon.com:4000
    auth:
      type: bearer

  sample:
    baseurl: http://localhost:1323/test
    auth: #none

# Define rest api actions for each of the services defined above.
# specify the DATA to use for the API in the CLI.
serviceActions:
  mc-infra-manager:
    GetAvailableKubernetesClusterNodeImage:
      method: get
      resourcePath: /availableK8sClusterNodeImage
      description: "Get available kubernetes cluster node image"
    GetAvailableKubernetesClusterVersion:
      method: get
      resourcePath: /availableK8sClusterVersion
      description: "Get available kubernetes cluster version"
    GetCloudInformation:
      method: get
      resourcePath: /cloudInfo
      description: "Get cloud information"
    ListAllConfigs:
      method: get
      resourcePath: /config
      description: "List all configs"
    CreateOrUpdateConfig:
      method: post
      resourcePath: /config
      description: "Create or Update config (SPIDER_REST_URL, DRAGONFLY_REST_URL, ...)"
    InitAllConfigs:
      method: delete
      resourcePath: /config
      description: "Init all configs"
    InitConfig:
      method: delete
      resourcePath: /config/{configId}
      description: "Init config"
    GetConfig:
      method: get
      resourcePath: /config/{configId}
      description: "Get config"
    ListAllRegisteredConnConfig:
      method: get
      resourcePath: /connConfig
      description: "List all registered ConnConfig"
    GetRegisteredConnConfigInfo:
      method: get
      resourcePath: /connConfig/{connConfigName}
      description: "Get registered ConnConfig info"
    PostRegisterCredentialInfo:
      method: post
      resourcePath: /credential
      description: "Post register Credential info"
    ForwardAny(GET)RequestToCB-Spider:
      method: post
      resourcePath: /forward/{path}
      description: "Forward any (GET) request to CB-Spider"
    CheckHTTPVersionOfIncomingRequest:
      method: get
      resourcePath: /httpVersion
      description: "Checks and logs the HTTP version of the incoming request to the server console."
    InspectResources(VNet,SecurityGroup,SshKey,Vm)RegisteredInCB-Tumblebug,CB-Spider,CSP:
      method: post
      resourcePath: /inspectResources
      description: "Inspect Resources (vNet, securityGroup, sshKey, vm) registered in CB-Tumblebug, CB-Spider, CSP"
    InspectResourcesOverview(VNet,SecurityGroup,SshKey,Vm)RegisteredInCB-TumblebugAndCSPForAllConnections:
      method: get
      resourcePath: /inspectResourcesOverview
      description: "Inspect Resources Overview (vNet, securityGroup, sshKey, vm) registered in CB-Tumblebug and CSP for all connections"
    GetKubernetesClusterInformation:
      method: get
      resourcePath: /k8sClusterInfo
      description: "Get kubernetes cluster information"
    LoadCommonResourcesFromInternalAssetFiles:
      method: get
      resourcePath: /loadCommonResource
      description: "Load Common Resources from internal asset files (Spec, Image)"
    LookupImage:
      method: post
      resourcePath: /lookupImage
      description: "Lookup image"
    LookupImageList:
      method: post
      resourcePath: /lookupImages
      description: "Lookup image list"
    LookupSpec:
      method: post
      resourcePath: /lookupSpec
      description: "Lookup spec"
    LookupSpecList:
      method: post
      resourcePath: /lookupSpecs
      description: "Lookup spec list"
    CheckAvailableConnectionConfigListForCreatingMCISDynamically:
      method: post
      resourcePath: /mcisDynamicCheckRequest
      description: "Check available ConnectionConfig list before create MCIS Dynamically from common spec and image"
    RecommendMCISPlan(FilterAndPriority):
      method: post
      resourcePath: /mcisRecommendVm
      description: "Recommend MCIS plan (filter and priority) Find details from https://github.com/cloud-barista/cb-tumblebug/discussions/1234"
    DeleteAllNamespaces:
      method: delete
      resourcePath: /ns
      description: "Delete all namespaces"
    ListAllNamespacesOrNamespacesID:
      method: get
      resourcePath: /ns
      description: "List all namespaces or namespaces' ID"
    CreateNamespace:
      method: post
      resourcePath: /ns
      description: "Create namespace"
    GetNamespace:
      method: get
      resourcePath: /ns/{nsId}
      description: "Get namespace"
    UpdateNamespace:
      method: put
      resourcePath: /ns/{nsId}
      description: "Update namespace"
    DeleteNamespace:
      method: delete
      resourcePath: /ns/{nsId}
      description: "Delete namespace"
    RunMCISBenchmarkForASinglePerformanceMetricAndReturnResults:
      method: post
      resourcePath: /ns/{nsId}/benchmark/mcis/{mcisId}
      description: "Run MCIS benchmark for a single performance metric and return results"
    RunMCISBenchmarkForAllPerformanceMetricsAndReturnResults:
      method: post
      resourcePath: /ns/{nsId}/benchmarkAll/mcis/{mcisId}
      description: "Run MCIS benchmark for all performance metrics and return results"
    RunMCISBenchmarkForNetworkLatency:
      method: get
      resourcePath: /ns/{nsId}/benchmarkLatency/mcis/{mcisId}
      description: "Run MCIS benchmark for network latency"
    SendACommandToSpecifiedMCIS:
      method: post
      resourcePath: /ns/{nsId}/cmd/mcis/{mcisId}
      description: "Send a command to specified MCIS"
    ControlTheLifecycleOfMCIS(Refine,Suspend,Resume,Reboot,Terminate):
      method: get
      resourcePath: /ns/{nsId}/control/mcis/{mcisId}
      description: "Control the lifecycle of MCIS (refine, suspend, resume, reboot, terminate)"
    ControlTheLifecycleOfVM(Suspend,Resume,Reboot,Terminate):
      method: get
      resourcePath: /ns/{nsId}/control/mcis/{mcisId}/vm/{vmId}
      description: "Control the lifecycle of VM (suspend, resume, reboot, terminate)"
    DeleteAlldefaultResourceObjectsInTheGivenNamespace:
      method: delete
      resourcePath: /ns/{nsId}/defaultResources
      description: "Delete all default Resource Objects in the given namespace"
    InstallTheBenchmarkAgentToSpecifiedMCIS:
      method: post
      resourcePath: /ns/{nsId}/installBenchmarkAgent/mcis/{mcisId}
      description: "Install the benchmark agent to specified MCIS"
    ListAllK8sClustersOrK8sClustersID:
      method: get
      resourcePath: /ns/{nsId}/k8scluster
      description: "List all K8sClusters or K8sClusters' ID"
    CreateK8sCluster:
      method: post
      resourcePath: /ns/{nsId}/k8scluster
      description: "Create K8sCluster"
    DeleteAllK8sClusters:
      method: delete
      resourcePath: /ns/{nsId}/k8scluster
      description: "Delete all K8sClusters"
    DeleteK8sCluster:
      method: delete
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}
      description: "Delete K8sCluster"
    GetK8sCluster:
      method: get
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}
      description: "Get K8sCluster"
    AddAK8sNodeGroup:
      method: post
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup
      description: "Add a K8sNodeGroup"
    RemoveAK8sNodeGroup:
      method: delete
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}
      description: "Remove a K8sNodeGroup"
    ChangeAK8sNodeGroupsAutoscaleSize:
      method: put
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}/autoscalesize
      description: "Change a K8sNodeGroup's Autoscale Size"
    SetAK8sNodeGroupsAutoscalingOn/Off:
      method: put
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/k8snodegroup/{k8sNodeGroupName}/onautoscaling
      description: "Set a K8sNodeGroup's Autoscaling On/Off"
    UpgradeAK8sClustersVersion:
      method: put
      resourcePath: /ns/{nsId}/k8scluster/{k8sClusterId}/upgrade
      description: "Upgrade a K8sCluster's version"
    LoaddefaultResourceFromInternalAssetFile:
      method: get
      resourcePath: /ns/{nsId}/loaddefaultResource
      description: "Load default Resource from internal asset file"
    CreateMCIS:
      method: post
      resourcePath: /ns/{nsId}/mcis
      description: "Create MCIS"
    DeleteAllMCISs:
      method: delete
      resourcePath: /ns/{nsId}/mcis
      description: "Delete all MCISs"
    ListAllMCISsOrMCISsID:
      method: get
      resourcePath: /ns/{nsId}/mcis
      description: "List all MCISs or MCISs' ID"
    GetMCISObject(Option-Status,AccessInfo,VmId):
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}
      description: "Get MCIS object (option: status, accessInfo, vmId)"
    DeleteMCIS:
      method: delete
      resourcePath: /ns/{nsId}/mcis/{mcisId}
      description: "Delete MCIS"
    RemoveABastionVMFromAllVNets:
      method: delete
      resourcePath: /ns/{nsId}/mcis/{mcisId}/bastion/{bastionVmId}
      description: "Remove a bastion VM from all vNets"
    CreateASpecialPurposeMCISForNLBAndDepolyAndSettingSWNLB:
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/mcSwNlb
      description: "Create a special purpose MCIS for NLB and depoly and setting SW NLB"
    ListAllNLBsOrNLBsID:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb
      description: "List all NLBs or NLBs' ID"
    CreateNLB:
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb
      description: "Create NLB"
    DeleteAllNLBs:
      method: delete
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb
      description: "Delete all NLBs"
    GetNLB:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb/{nlbId}
      description: "Get NLB"
    DeleteNLB:
      method: delete
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb/{nlbId}
      description: "Delete NLB"
    GetNLBHealth:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb/{nlbId}/healthz
      description: "Get NLB Health"
    AddVMsToNLB:
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb/{nlbId}/vm
      description: "Add VMs to NLB"
    DeleteVMsFromNLB:
      method: delete
      resourcePath: /ns/{nsId}/mcis/{mcisId}/nlb/{nlbId}/vm
      description: "Delete VMs from NLB"
    GetSitesInMCIS:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/site
      description: "Get sites in MCIS"
    ListSubGroupIDsInASpecifiedMCIS:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/subgroup
      description: "List SubGroup IDs in a specified MCIS"
    ListVMsWithASubGroupLabelInASpecifiedMCIS:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/subgroup/{subgroupId}
      description: "List VMs with a SubGroup label in a specified MCIS"
    ScaleOutSubGroupInSpecifiedMCIS:
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/subgroup/{subgroupId}
      description: "ScaleOut subGroup in specified MCIS"
    CreateAndAddHomogeneousVMs(SubGroup)ToASpecifiedMCIS(SetSubGroupSizeForMultipleVMs):
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm
      description: "Create and add homogeneous VMs(subGroup) to a specified MCIS (Set subGroupSize for multiple VMs)"
    GetBastionNodesForAVM:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{targetVmId}/bastion
      description: "Get bastion nodes for a VM"
    SetBastionNodesForAVM:
      method: put
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{targetVmId}/bastion/{bastionVmId}
      description: "Set bastion nodes for a VM"
    GetVMInSpecifiedMCIS:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{vmId}
      description: "Get VM in specified MCIS"
    DeleteVMInSpecifiedMCIS:
      method: delete
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{vmId}
      description: "Delete VM in specified MCIS"
    GetAvailableDataDisksForAVM:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{vmId}/dataDisk
      description: "Get available dataDisks for a VM"
    Attach/DetachAvailableDataDisk:
      method: put
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{vmId}/dataDisk
      description: "Attach/Detach available dataDisk"
    Provisioning(CreateAndAttach)DataDisk:
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{vmId}/dataDisk
      description: "Provisioning (Create and attach) dataDisk"
    SnapshotVMAndCreateACustomImageObjectUsingTheSnapshot:
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vm/{vmId}/snapshot
      description: "Snapshot VM and create a Custom Image Object using the Snapshot"
    CreateVMDynamicallyAndAddItToMCIS:
      method: post
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vmDynamic
      description: "Create VM Dynamically and add it to MCIS"
    GetResourceInfoOfASite-To-SiteVPN(Currently,GCP-AWSIsSupported):
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vpn/{vpnId}
      description: "Get resource info of a site-to-site VPN (Currently, GCP-AWS is supported)"
    CheckTheStatusOfASpecificRequestByItsID:
      method: get
      resourcePath: /ns/{nsId}/mcis/{mcisId}/vpn/{vpnId}/request/{requestId}
      description: "Check the status of a specific request by its ID"
    CreateMCISDynamically:
      method: post
      resourcePath: /ns/{nsId}/mcisDynamic
      description: "Create MCIS Dynamically from common spec and image"
    InstallMonitoringAgent(CB-DragonflyAgent)ToMCIS:
      method: post
      resourcePath: /ns/{nsId}/monitoring/install/mcis/{mcisId}
      description: "Install monitoring agent (CB-Dragonfly agent) to MCIS"
    GetMonitoringDataOfSpecifiedMCISForSpecifiedMonitoringMetric(Cpu,Memory,Disk,Network):
      method: get
      resourcePath: /ns/{nsId}/monitoring/mcis/{mcisId}/metric/{metric}
      description: "Get monitoring data of specified MCIS for specified monitoring metric (cpu, memory, disk, network)"
    SetMonitoringAgent(CB-DragonflyAgent)InstallationStatusInstalled(ForWindowsVMOnly):
      method: put
      resourcePath: /ns/{nsId}/monitoring/status/mcis/{mcisId}/vm/{vmId}
      description: "Set monitoring agent (CB-Dragonfly agent) installation status installed (for Windows VM only)"
    ListAllMCISPolicies:
      method: get
      resourcePath: /ns/{nsId}/policy/mcis
      description: "List all MCIS policies"
    DeleteAllMCISPolicies:
      method: delete
      resourcePath: /ns/{nsId}/policy/mcis
      description: "Delete all MCIS policies"
    GetMCISPolicy:
      method: get
      resourcePath: /ns/{nsId}/policy/mcis/{mcisId}
      description: "Get MCIS Policy"
    CreateMCISAutomationPolicy:
      method: post
      resourcePath: /ns/{nsId}/policy/mcis/{mcisId}
      description: "Create MCIS Automation policy"
    DeleteMCISPolicy:
      method: delete
      resourcePath: /ns/{nsId}/policy/mcis/{mcisId}
      description: "Delete MCIS Policy"
    RegisterExistingVMInACSPToCloud-BaristaMCIS:
      method: post
      resourcePath: /ns/{nsId}/registerCspVm
      description: "Register existing VM in a CSP to Cloud-Barista MCIS"
    ListAllCustomImagesOrCustomImagesID:
      method: get
      resourcePath: /ns/{nsId}/resources/customImage
      description: "List all customImages or customImages' ID"
    RegisterExistingCustomImageInACSP:
      method: post
      resourcePath: /ns/{nsId}/resources/customImage
      description: "Register existing Custom Image in a CSP (option=register)"
    DeleteAllCustomImages:
      method: delete
      resourcePath: /ns/{nsId}/resources/customImage
      description: "Delete all customImages"
    DeleteCustomImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/customImage/{customImageId}
      description: "Delete customImage"
    GetCustomImage:
      method: get
      resourcePath: /ns/{nsId}/resources/customImage/{customImageId}
      description: "Get customImage"
    ListAllDataDisksOrDataDisksID:
      method: get
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: "List all Data Disks or Data Disks' ID"
    CreateDataDisk:
      method: post
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: "Create Data Disk"
    DeleteAllDataDisks:
      method: delete
      resourcePath: /ns/{nsId}/resources/dataDisk
      description: "Delete all Data Disks"
    UpsizeDataDisk:
      method: put
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: "Upsize Data Disk"
    DeleteDataDisk:
      method: delete
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: "Delete Data Disk"
    GetDataDisk:
      method: get
      resourcePath: /ns/{nsId}/resources/dataDisk/{dataDiskId}
      description: "Get Data Disk"
    FetchImages:
      method: post
      resourcePath: /ns/{nsId}/resources/fetchImages
      description: "Fetch images"
    FetchSpecs:
      method: post
      resourcePath: /ns/{nsId}/resources/fetchSpecs
      description: "Fetch specs"
    FilterSpecsByRange:
      method: post
      resourcePath: /ns/{nsId}/resources/filterSpecsByRange
      description: "Filter specs by range"
    DeleteAllImages:
      method: delete
      resourcePath: /ns/{nsId}/resources/image
      description: "Delete all images"
    ListAllImagesOrImagesID:
      method: get
      resourcePath: /ns/{nsId}/resources/image
      description: "List all images or images' ID"
    RegisterImage:
      method: post
      resourcePath: /ns/{nsId}/resources/image
      description: "Register image"
    GetImage:
      method: get
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: "Get image"
    UpdateImage:
      method: put
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: "Update image"
    DeleteImage:
      method: delete
      resourcePath: /ns/{nsId}/resources/image/{imageId}
      description: "Delete image"
    SearchImage:
      method: post
      resourcePath: /ns/{nsId}/resources/searchImage
      description: "Search image"
    ListAllSecurityGroupsOrSecurityGroupsID:
      method: get
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: "List all Security Groups or Security Groups' ID"
    CreateSecurityGroup:
      method: post
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: "Create Security Group"
    DeleteAllSecurityGroups:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup
      description: "Delete all Security Groups"
    GetSecurityGroup:
      method: get
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}
      description: "Get Security Group"
    DeleteSecurityGroup:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}
      description: "Delete Security Group"
    CreateFirewallRules:
      method: post
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules
      description: "Create FirewallRules"
    DeleteFirewallRules:
      method: delete
      resourcePath: /ns/{nsId}/resources/securityGroup/{securityGroupId}/rules
      description: "Delete FirewallRules"
    ListAllSpecsOrSpecsID:
      method: get
      resourcePath: /ns/{nsId}/resources/spec
      description: "List all specs or specs' ID"
    RegisterSpec:
      method: post
      resourcePath: /ns/{nsId}/resources/spec
      description: "Register spec"
    DeleteAllSpecs:
      method: delete
      resourcePath: /ns/{nsId}/resources/spec
      description: "Delete all specs"
    GetSpec:
      method: get
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: "Get spec"
    UpdateSpec:
      method: put
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: "Update spec"
    DeleteSpec:
      method: delete
      resourcePath: /ns/{nsId}/resources/spec/{specId}
      description: "Delete spec"
    ListAllSSHKeysOrSSHKeysID:
      method: get
      resourcePath: /ns/{nsId}/resources/sshKey
      description: "List all SSH Keys or SSH Keys' ID"
    CreateSSHKey:
      method: post
      resourcePath: /ns/{nsId}/resources/sshKey
      description: "Create SSH Key"
    DeleteAllSSHKeys:
      method: delete
      resourcePath: /ns/{nsId}/resources/sshKey
      description: "Delete all SSH Keys"
    GetSSHKey:
      method: get
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: "Get SSH Key"
    UpdateSSHKey:
      method: put
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: "Update SSH Key"
    DeleteSSHKey:
      method: delete
      resourcePath: /ns/{nsId}/resources/sshKey/{sshKeyId}
      description: "Delete SSH Key"
    ListAllVNetsOrVNetsID:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet
      description: "List all VNets or VNets' ID"
    CreateVNet:
      method: post
      resourcePath: /ns/{nsId}/resources/vNet
      description: "Create VNet"
    DeleteAllVNets:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet
      description: "Delete all VNets"
    DeleteVNet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}
      description: "Delete VNet"
    GetVNet:
      method: get
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}
      description: "Get VNet"
    CreateSubnet:
      method: post
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet
      description: "Create Subnet"
    DeleteSubnet:
      method: delete
      resourcePath: /ns/{nsId}/resources/vNet/{vNetId}/subnet/{subnetId}
      description: "Delete Subnet"
    GetValueOfAnObject:
      method: get
      resourcePath: /object
      description: "Get value of an object"
    DeleteAnObject:
      method: delete
      resourcePath: /object
      description: "Delete an object"
    ListAllObjectsForAGivenKey:
      method: get
      resourcePath: /objects
      description: "List all objects for a given key"
    DeleteChildObjectsAlongWithTheGivenObject:
      method: delete
      resourcePath: /objects
      description: "Delete child objects along with the given object"
    ListAllRegisteredProviders:
      method: get
      resourcePath: /provider
      description: "List all registered Providers"
    GetRegisteredRegionInfo:
      method: get
      resourcePath: /provider/{providerName}/region/{regionName}
      description: "Get registered region info"
    CheckTumblebugIsReady:
      method: get
      resourcePath: /readyz
      description: "Check Tumblebug is ready"
    ListAllRegisteredRegions:
      method: get
      resourcePath: /region
      description: "List all registered regions"
    RegisterCSPNativeResources(VNet,SecurityGroup,SshKey,Vm)ToCB-Tumblebug:
      method: post
      resourcePath: /registerCspResources
      description: "Register CSP Native Resources (vNet, securityGroup, sshKey, vm) to CB-Tumblebug"
    RegisterCSPNativeResources(VNet,SecurityGroup,SshKey,Vm)FromAllCloudsToCB-Tumblebug:
      method: post
      resourcePath: /registerCspResourcesAll
      description: "Register CSP Native Resources (vNet, securityGroup, sshKey, vm) from all Clouds to CB-Tumblebug"
    GetRequestDetails:
      method: get
      resourcePath: /request/{reqId}
      description: "Get details of a specific request"
    DeleteASpecificRequestsDetails:
      method: delete
      resourcePath: /request/{reqId}
      description: "Delete details of a specific request"
    GetAllRequests:
      method: get
      resourcePath: /requests
      description: "Get details of all requests with optional filters."
    DeleteAllRequestsDetails:
      method: delete
      resourcePath: /requests
      description: "Delete details of all requests"
    (ToBeProvided)UpdateASite-To-SiteVPN:
      method: put
      resourcePath: /stream-response/ns/{nsId}/mcis/{mcisId}/vpn/{vpnId}
      description: "(To be provided) Update a site-to-site VPN"
    CreateASite-To-SiteVPN(Currently,GCP-AWSIsSupported):
      method: post
      resourcePath: /stream-response/ns/{nsId}/mcis/{mcisId}/vpn/{vpnId}
      description: "Create a site-to-site VPN (Currently, GCP-AWS is supported)"
    DeleteASite-To-SiteVPN(Currently,GCP-AWSIsSupported):
      method: delete
      resourcePath: /stream-response/ns/{nsId}/mcis/{mcisId}/vpn/{vpnId}
      description: "Delete a site-to-site VPN (Currently, GCP-AWS is supported)"
    CreateSystemMCISDynamicallyForSpecialPurposeInNS-System-Purpose-Common-Ns:
      method: post
      resourcePath: /systemMcis
      description: "Create System MCIS Dynamically for Special Purpose"
    DesignAMulti-CloudNetworkConfiguration:
      method: post
      resourcePath: /util/net/design
      description: "Design a hierarchical network configuration of a VPC network or multi-cloud network consisting of multiple VPC networks"
    ValidateAMulti-CloudNetworkConfiguration:
      method: post
      resourcePath: /util/net/validate
      description: "Validate a hierarchical configuration of a VPC network or multi-cloud network consisting of multiple VPC networks"
    CheckResourcesExistence:
      method: get
      resourcePath: /{nsId}/checkResource/{resourceType}/{resourceId}
      description: "Check resources' existence"

  mc-iam-manager:
    Createpermission:
      method: post
      resourcePath: /api/permission
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getpermissions:
      method: get
      resourcePath: /api/permission
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Securitykey:
      method: get
      resourcePath: /api/poc/sts/securitykey
      description: "임시보안자격증명 발급요청\n\nPOC 단계.\n\nAWS / Alibaba OIDC 기반 Keyclaok IDP 사용으로 연결 설정 필요"
    Tokentest:
      method: get
      resourcePath: /api/tokentest
      description: "토큰의 유효성을 확인합니다."
    Getwpmappinglistbyworkspaceid:
      method: get
      resourcePath: /api/wsprj/workspace/id/{workspaceId}
      description: "workspace - projects mapping workspace 기준 단건 목록 조회"
    Getworkspaceuserrolemappinglistorderbyworkspace:
      method: get
      resourcePath: /api/wsuserrole
      description: "workspace - user - role mapping 목록 workspace 기준 전체 조회"
    Createworkspaceuserrolemappingbyname:
      method: post
      resourcePath: /api/wsuserrole
      description: "workspace - user - role mapping 생성"
    Getworkspaceuserrolemappinglistbyuserid:
      method: get
      resourcePath: /api/wsuserrole/user/id/{userId}
      description: "workspace - user - role mapping 목록 user 기준 조회"
    Login:
      method: post
      resourcePath: /api/auth/login
      description: "ID/Password를 받아 JWT 세션 토큰을 반환"
    Searchprojectsbyname:
      method: get
      resourcePath: /api/prj/project/{projectName}
      description: "project 목록 검색"
    Deleteworkspaceprojectmappingbyid:
      method: delete
      resourcePath: /api/wsprj/workspace/id/{workspaceId}/project/id/{projectId}
      description: "workspace - projects mapping 단건 삭제"
    Loginrefresh:
      method: post
      resourcePath: /api/auth/login/refresh
      description: "refresh_token과 기존 JWT를 받아, 새로운 JWT 토큰 발급"
    Getuserinfo:
      method: get
      resourcePath: /api/auth/userinfo
      description: "유저 정보 조회"
    Deletepermission:
      method: delete
      resourcePath: /api/permission/id/{permissionId}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getpermission:
      method: get
      resourcePath: /api/permission/id/{permissionId}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Updatepermission:
      method: put
      resourcePath: /api/permission/id/{permissionId}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getprojectlist:
      method: get
      resourcePath: /api/prj
      description: "project 목록 조회"
    Createproject:
      method: post
      resourcePath: /api/prj
      description: "project 생성"
    Createresourcesbyswagger:
      method: post
      resourcePath: /api/resource/file/framework/{framework}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Deleteresource:
      method: delete
      resourcePath: /api/resource/id/{id}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Updateresource:
      method: put
      resourcePath: /api/resource/id/{id}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getcerts:
      method: get
      resourcePath: /api/auth/certs
      description: "유저 토큰의 사용가능 유무"
    Ticketvalidate:
      method: get
      resourcePath: /api/ticket
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getticket:
      method: post
      resourcePath: /api/ticket
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Tokentestoperator:
      method: get
      resourcePath: /api/tokentest/operator
      description: "토큰의 유효성과 역할에 Admin, Operator가 존재하는지 확인합니다."
    Getworkspaceuserrolemappinglistbyworkspaceid:
      method: get
      resourcePath: /api/wsuserrole/workspace/id/{workspaceId}
      description: "workspace - user - role mapping 목록 workspace 기준 조회"
    Getusevalidate:
      method: get
      resourcePath: /api/auth/validate
      description: "유저 토큰의 사용가능 유무"
    Tokentestadmin:
      method: get
      resourcePath: /api/tokentest/admin
      description: "토큰의 유효성과 역할에 Admin이 존재하는지 확인합니다."
    Tokentestviewer:
      method: get
      resourcePath: /api/tokentest/viewer
      description: "토큰의 유효성과 역할에 Admin, Operator, Viewer가 존재하는지 확인합니다."
    Syncprojectlistwithmcinfra:
      method: get
      resourcePath: /api/tool/mcinfra/sync
      description: "연결된 TB(mcinframanager)의 NS 리스트를 Project List 로 등록.  \n  \n기존 등록된 project 와 중복이 발생하면 오류 발생. 새로운 환경에서 첫 회 실행하는 것을 추천."
    Getusers:
      method: get
      resourcePath: /api/user
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Createuser:
      method: post
      resourcePath: /api/user
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Updateuser:
      method: put
      resourcePath: /api/user
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Deleteuser:
      method: delete
      resourcePath: /api/user/id/{userid}
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Alive:
      method: get
      resourcePath: /alive
      description: "mc-iam-manager가 정상적으로 작동중인지 단순 확인합니다."
    Createresource:
      method: post
      resourcePath: /api/resource
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Getresources:
      method: get
      resourcePath: /api/resource
      description: "사용자는 uma_protection Role 을 가져야 한다."
    Deleterolebyid:
      method: delete
      resourcePath: /api/role/id/{roleId}
      description: "role 수정"
    Getrolebyid:
      method: get
      resourcePath: /api/role/id/{roleId}
      description: "role 단건 조회"
    Updaterolebyid:
      method: put
      resourcePath: /api/role/id/{roleId}
      description: "role 수정"
    GetrolebypolicyidNotuse:
      method: get
      resourcePath: /api/role/policyid/{policyid}
      description: "role 단건 조회"
    Getworkspacelist:
      method: get
      resourcePath: /api/ws
      description: "workspace 목록 조회"
    Createworkspace:
      method: post
      resourcePath: /api/ws
      description: "workspace 생성"
    Deleteworkspacebyid:
      method: delete
      resourcePath: /api/ws/workspace/id/{workspaceId}
      description: "workspace 삭제"
    Getworkspacebyid:
      method: get
      resourcePath: /api/ws/workspace/id/{workspaceId}
      description: "workspace 단건 조회"
    Updateworkspacebyid:
      method: put
      resourcePath: /api/ws/workspace/id/{workspaceId}
      description: "workspace 수정"
    Searchworkspacesbyname:
      method: get
      resourcePath: /api/ws/workspace/{workspaceName}
      description: "workspace 검색"
    Updatewpmappings:
      method: put
      resourcePath: /api/wsprj
      description: "workspace - projects mapping 수정\n\n새로 입력되는 projects 와 기존 projects 를 비교하여, 없는 project 는 삭제하고, 신규 projects 는 새로 mapping 한다."
    Getwpmappinglistorderbyworkspace:
      method: get
      resourcePath: /api/wsprj
      description: "workspace - projects mapping workspace 기준 모든 목록 조회"
    Createwpmapping:
      method: post
      resourcePath: /api/wsprj
      description: "workspace - projects mapping 생성"
    Logout:
      method: post
      resourcePath: /api/auth/logout
      description: "AccessToken및 RefreshToken을 받아 해당 토큰 파기"
    Deleteworkspaceuserrolemapping:
      method: delete
      resourcePath: /api/wsuserrole/workspace/id/{workspaceId}/user/id/{userId}
      description: "workspace - user - role mapping 목록 workspace 와 user 로 mapping 삭제"
    Getworkspaceuserrolemappingbyid:
      method: get
      resourcePath: /api/wsuserrole/workspace/id/{workspaceId}/user/id/{userId}
      description: "workspace - user - role mapping 목록 workspace 와 user 로 role 조회"
    Getrolelist:
      method: get
      resourcePath: /api/role
      description: "role 전체 목록 조회"
    Createrole:
      method: post
      resourcePath: /api/role
      description: "role 생성"
    Searchrolesbyname:
      method: get
      resourcePath: /api/role/name/{roleName}
      description: "role 검색"
    Deleteprojectbyid:
      method: delete
      resourcePath: /api/prj/project/id/{projectId}
      description: "project 삭제"
    Getprojectbyid:
      method: get
      resourcePath: /api/prj/project/id/{projectId}
      description: "project 단건 조회"
    Updateprojectbyid:
      method: put
      resourcePath: /api/prj/project/id/{projectId}
      description: "project 수정"